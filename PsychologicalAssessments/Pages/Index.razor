@page "/"

@using System.Text.Json
@using BlazorDownloadFile
@using PsychologicalAssessments.Orchestrator.Base
@using PsychologicalAssessments.Orchestrator.Service
@using PsychologicalAssessments.Services.Clipboard

@inject IOrchestratorService OrchestratorService
@inject IClipboardService ClipboardService
@inject IBlazorDownloadFileService BlazorDownloadFileService

<PageTitle>Home</PageTitle>

<div class="container">
    <form>
        <div class="mb-3">
            <label for="selectOption" class="form-label">Choose test type</label>
            <InputSelect @bind-Value="@_serviceType" class="form-select" id="selectOption">
                @foreach (var countryName in Enum.GetValues(typeof(ServiceType)))
                {
                    <option value="@countryName">@countryName</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="fileInput" class="form-label">Upload input file</label>
             <InputFile OnChange="@LoadFile" class="form-control" id="fileInput"/>
        </div>

        <button class="btn btn-primary" @onclick="@DownloadFile">Download</button>
        <button class="btn btn-secondary" @onclick="CopyToClipboard">
             <i class="fas fa-copy"></i> Copy
        </button>
    </form>
</div>

@if (_snapshot?.Exception != null)
{
    <div class="alert alert-danger" role="alert">
        @(_snapshot.Exception.Message)
        @(_snapshot.Exception.StackTrace)
    </div>
}

<pre>
    @if (_showResults)
    {
        @JsonSerializer.Serialize(_snapshot?.States?.LastOrDefault(), new JsonSerializerOptions() { WriteIndented = true })
    }
</pre>

@code {
    private ServiceType _serviceType = ServiceType.ConnersSelf;
    private bool _showResults;
    private Snapshot? _snapshot;
        const string ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        var file = files.FirstOrDefault();

        if (file is null)
        {
            return;
        }

        _snapshot = await OrchestratorService.Orchestrate(_serviceType, file);
        _showResults = true;
    }

    private async Task DownloadFile()
    {
        var name = _snapshot?.States?.LastOrDefault()?.Name;
        var fileName = $"Output-{name}.xlsx";
        var output = _snapshot!.Output;

        await BlazorDownloadFileService.DownloadFile(fileName, output, ContentType);
    }

    private void CopyToClipboard()
    {
        var json = JsonSerializer.Serialize(_snapshot?.States?.LastOrDefault(), new JsonSerializerOptions()
        {
            WriteIndented = true
        });

        ClipboardService.CopyToClipboard(json);
    }

}